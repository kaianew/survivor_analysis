for (seas in 1:20) {
# Subset this season
season_data = subset(data, season == seas)
# We make a matrix between players and all other players to hold weights for SE computation
all_players = unique(season_data$castaway_id)
num_xes = length(all_players)
mat = matrix(0, nrow = num_xes, ncol = num_xes)
for (i in 1:(nrow(mat))) {
mat[i, i] = NA
}
vote_matrix = as.data.frame(mat)
colnames(vote_matrix) = all_players
rownames(vote_matrix) = all_players
# Loop through sog_ids
# Find max sog_id
for (sog in unique(season_data$sog_id)) {
sog_data = subset(season_data, sog_id == sog)
person_booted = sog_data[1, "voted_out"]
id_booted = sog_data[1, "voted_out_id"]
for (i in 1:(nrow(sog_data))) {
curr_sog_player = sog_data[i,]
gone = (curr_sog_player$castaway == person_booted) # This is voted_out col
# Calc shannon entropy
# FIXME: Could take a subset of the matrix if people are not merged that represents only the people voting
player_id = curr_sog_player$castaway_id
shannon_vec = vote_matrix[,player_id]
shannon_vec = na.omit(shannon_vec)
se = entropy(shannon_vec)
# Make new row and calculate all values
new_row = data.frame(pid = player_id,
name = curr_sog_player$castaway,
season_num = seas,
sog_num = sog,
voted_out = gone,
shannon_e = se)
# Add row to se_dataframe
se_dataframe = rbind(se_dataframe, new_row)
}
# After a stage of the game, update weights in vote matrix
# We want a vector of unique targets. Then we'll increment the weight between all of the nodes who voted for each target (unless ego and alter are self).
voting_blocs = split(sog_data$castaway_id, sog_data$vote_id)
for (bloc in voting_blocs) {
# Check to see that the bloc is larger than 1
if (length(bloc) > 1) {
for(i in 1:(length(bloc)-1)) {
for(j in (i+1):length(bloc)) {
# Increment each pair by 1 in the vote_matrix, because they have voted together
# Update both cells in the matrix
vote_matrix[i,j] = vote_matrix[i,j] + 1
vote_matrix[j, i] = vote_matrix[j, i] + 1
}
}
}
}
# Remove the person who was voted out entirely from the vote_matrix
col_name = id_booted[[1]]
vote_matrix = vote_matrix[-which(rownames(vote_matrix) == col_name), ]
vote_matrix[[col_name]] = NULL
# FIXME: Two problems. 1) This isn't working to eject the person booted from the df. 2) The weights are updating incorrectly from round to round
if (seas == 1) {
print(typeof(col_name))
print(vote_matrix)
}
}
}
library(entropy)
# Want dataframe that has the following data from seasons 1-20
# Player id | name | season num | sog | voted out this sog (boolean) | cumulative shannon entropy (SE)
# Cumulative SE function requires a vector of weights for all other people in the game, where weights are how many times they voted together
# Use regex and subset to get initial dataframe that has all the data from US1-20
pattern = "^US(0[1-9]|1[0-9]|20)$"
matches = grepl(pattern, vote_history$version_season)
data = subset(vote_history, matches)
data
se_dataframe = data.frame(pid = numeric(),
name = character(),
season_num = numeric(),
sog_num = numeric(),
voted = logical(),
shannon_e = numeric())
# Loop through seasons
for (seas in 1:20) {
# Subset this season
season_data = subset(data, season == seas)
# We make a matrix between players and all other players to hold weights for SE computation
all_players = unique(season_data$castaway_id)
num_xes = length(all_players)
mat = matrix(0, nrow = num_xes, ncol = num_xes)
for (i in 1:(nrow(mat))) {
mat[i, i] = NA
}
vote_matrix = as.data.frame(mat)
colnames(vote_matrix) = all_players
rownames(vote_matrix) = all_players
# Loop through sog_ids
# Find max sog_id
for (sog in unique(season_data$sog_id)) {
sog_data = subset(season_data, sog_id == sog)
person_booted = sog_data[1, "voted_out"]
id_booted = sog_data[1, "voted_out_id"]
for (i in 1:(nrow(sog_data))) {
curr_sog_player = sog_data[i,]
gone = (curr_sog_player$castaway == person_booted) # This is voted_out col
# Calc shannon entropy
# FIXME: Could take a subset of the matrix if people are not merged that represents only the people voting
player_id = curr_sog_player$castaway_id
shannon_vec = vote_matrix[,player_id]
shannon_vec = na.omit(shannon_vec)
se = entropy(shannon_vec)
# Make new row and calculate all values
new_row = data.frame(pid = player_id,
name = curr_sog_player$castaway,
season_num = seas,
sog_num = sog,
voted_out = gone,
shannon_e = se)
# Add row to se_dataframe
se_dataframe = rbind(se_dataframe, new_row)
}
# After a stage of the game, update weights in vote matrix
# We want a vector of unique targets. Then we'll increment the weight between all of the nodes who voted for each target (unless ego and alter are self).
voting_blocs = split(sog_data$castaway_id, sog_data$vote_id)
for (bloc in voting_blocs) {
# Check to see that the bloc is larger than 1
if (length(bloc) > 1) {
for(i in 1:(length(bloc)-1)) {
for(j in (i+1):length(bloc)) {
# Increment each pair by 1 in the vote_matrix, because they have voted together
# Update both cells in the matrix
vote_matrix[i,j] = vote_matrix[i,j] + 1
vote_matrix[j, i] = vote_matrix[j, i] + 1
}
}
}
}
# # Remove the person who was voted out entirely from the vote_matrix
# col_name = id_booted[[1]]
# vote_matrix = vote_matrix[-which(rownames(vote_matrix) == col_name), ]
# vote_matrix[[col_name]] = NULL
# FIXME: Two problems. 1) This isn't working to eject the person booted from the df. 2) The weights are updating incorrectly from round to round
if (seas == 1) {
print(typeof(col_name))
print(vote_matrix)
}
}
}
se_dataframe
source("standard_cleaning.R")
nrow(data)
# Drop Q73_5 -- it was not answered by anyone
data = subset(data, select = -Q73_5)
# Make task competency be numeric
data[116:122] = lapply(data[116:122], function(x) as.numeric(x))
tmp = subset(data, data$group == "ADHD")
tmp2 = subset(data, data$group == "NT")
mean(as.numeric(tmp$distract_1), na.rm = T)
mean(as.numeric(tmp2$distract_1), na.rm = T)
levels(data$group)
data$group = relevel(data$group, ref = "NT")
levels(data$group)
tmp = subset(data, data$group == "ADHD")
tmp2 = subset(data, data$group == "NT")
mean(as.numeric(tmp$distract_1), na.rm = T)
mean(as.numeric(tmp2$distract_1), na.rm = T)
# Here we will make a table that breaks down what neurotypes everyone has and what they are
which(colnames(data) == "Q3_1")
which(colnames(data) == "Q3_12")
neurotypes = data.frame("neurotype" = character(0),
"number" = numeric(0))
for (i in 20:29) {
curr_subset = na.omit(data[i])
print(curr_subset[[1, 1]])
print(nrow(curr_subset))
new.row = data.frame(neurotype = curr_subset[[1, 1]],
number = nrow(curr_subset))
neurotypes = rbind(neurotypes, new.row)
}
neurotypes
neurotypes = xtable(neurotypes)
print(neurotypes, file = "neurotypes.tex", include.rownames = FALSE)
# Below we check for the number of AuDHD people
audhd = subset(data, group == "ADHD" & Q3_4 == "Autism")
nrow(audhd)
counts = table(data$region)
pie(counts, main = "Region Breakdown", col = rainbow(length(counts)))
counts_df <- as.data.frame(counts)
counts_df <- counts_df[order(-counts_df$Freq), ]
print(counts_df)
# Find number of unique countries
country_num = length(unique(data$country))
print(as.data.frame(table(data$country)))
print(paste("Number of unique countries: ", country_num))
# Age range and average age: Q71
print("Age:")
summary(as.numeric(data$age))
# Min: 18, max: 64, mean: 32.43
print("Age median:")
median(as.numeric(data$age), na.rm = TRUE)
# Years of experience: Q9
print("Years of experience:")
summary(as.numeric(data$yoe))
# Min: 0, max: 40, mean: 10.44
print("YOE median:")
median(as.numeric(data$yoe), na.rm = TRUE)
# Gender
genderct = as.data.frame(table(data$gender))
genderct = genderct[order(-genderct$Freq), ]
# Add percentages as another column.
total = sum(genderct$Freq)
genderct$Percentage = (genderct$Freq / total) * 100
genderct
# General group numbers
groupct = as.data.frame(table(data$group))
groupct = groupct[order(-groupct$Freq), ]
total = sum(groupct$Freq)
groupct$Percentage = (groupct$Freq / total) * 100
groupct
# ageofadhd_realization is knowing you have ADHD in childhood/adulthood.
diagage = as.data.frame(table(data$ageofadhd_realization))
diagage = diagage[diagage$Var1 != "", ]
total = sum(diagage$Freq)
diagage$Percentage = (diagage$Freq / total) * 100
diagage
# How many of the Other ND group are autistic?
othernd = subset(data, group == "ND non-ADHD")
print("Num autistic in Other ND group:")
num = nrow(subset(othernd, Q3_4 == "Autism"))
print(num)
print("Percentage autistic in Other ND group:")
num / 60
# Brief context on job title
jobtitle = as.data.frame(table(data$job_title))
jobtitle = jobtitle[order(-jobtitle$Freq), ]
jobtitle
total = sum(jobtitle$Freq)
239 + 58
print("Percentage of Software Engineer or Software Developer:")
297 / total
# Q8 is diagnosis reason
diagreason = as.data.frame(table(data$Q8))
diagreason = diagreason[order(-diagreason$Freq), ]
diagreason
total = sum(diagreason$Freq)
77 / total
44 / total
counts = table(data$region)
pie(counts, main = "Region Breakdown", col = rainbow(length(counts)))
counts_df <- as.data.frame(counts)
counts_df <- counts_df[order(-counts_df$Freq), ]
print(counts_df)
# Find number of unique countries
country_num = length(unique(data$country))
print(as.data.frame(table(data$country)))
print(paste("Number of unique countries: ", country_num))
# Age range and average age: Q71
print("Age:")
summary(as.numeric(data$age))
# Min: 18, max: 64, mean: 32.43
print("Age median:")
median(as.numeric(data$age), na.rm = TRUE)
# Years of experience: Q9
print("Years of experience:")
summary(as.numeric(data$yoe))
# Min: 0, max: 40, mean: 10.44
print("YOE median:")
median(as.numeric(data$yoe), na.rm = TRUE)
# Gender
genderct = as.data.frame(table(data$gender))
genderct = genderct[order(-genderct$Freq), ]
# FIXME make table of gender + neurotype
gender_neurotype_table = table(data$gender, data$group)
gender_neurotype_table = as.data.frame(gender_neurotype_table)
gender_neurotype_table
# Add percentages as another column.
total = sum(genderct$Freq)
genderct$Percentage = (genderct$Freq / total) * 100
genderct
# General group numbers
groupct = as.data.frame(table(data$group))
groupct = groupct[order(-groupct$Freq), ]
total = sum(groupct$Freq)
groupct$Percentage = (groupct$Freq / total) * 100
groupct
# ageofadhd_realization is knowing you have ADHD in childhood/adulthood.
diagage = as.data.frame(table(data$ageofadhd_realization))
diagage = diagage[diagage$Var1 != "", ]
total = sum(diagage$Freq)
diagage$Percentage = (diagage$Freq / total) * 100
diagage
# How many of the Other ND group are autistic?
othernd = subset(data, group == "ND non-ADHD")
print("Num autistic in Other ND group:")
num = nrow(subset(othernd, Q3_4 == "Autism"))
print(num)
print("Percentage autistic in Other ND group:")
num / 60
# Brief context on job title
jobtitle = as.data.frame(table(data$job_title))
jobtitle = jobtitle[order(-jobtitle$Freq), ]
jobtitle
total = sum(jobtitle$Freq)
239 + 58
print("Percentage of Software Engineer or Software Developer:")
297 / total
# Q8 is diagnosis reason
diagreason = as.data.frame(table(data$Q8))
diagreason = diagreason[order(-diagreason$Freq), ]
diagreason
total = sum(diagreason$Freq)
77 / total
44 / total
source("standard_cleaning.R")
nrow(data)
# Drop Q73_5 -- it was not answered by anyone
data = subset(data, select = -Q73_5)
# Make task competency be numeric
data[116:122] = lapply(data[116:122], function(x) as.numeric(x))
tmp = subset(data, data$group == "ADHD")
tmp2 = subset(data, data$group == "NT")
mean(as.numeric(tmp$distract_1), na.rm = T)
mean(as.numeric(tmp2$distract_1), na.rm = T)
levels(data$group)
data$group = relevel(data$group, ref = "NT")
levels(data$group)
tmp = subset(data, data$group == "ADHD")
tmp2 = subset(data, data$group == "NT")
mean(as.numeric(tmp$distract_1), na.rm = T)
mean(as.numeric(tmp2$distract_1), na.rm = T)
# Here we will make a table that breaks down what neurotypes everyone has and what they are
which(colnames(data) == "Q3_1")
which(colnames(data) == "Q3_12")
neurotypes = data.frame("neurotype" = character(0),
"number" = numeric(0))
for (i in 20:29) {
curr_subset = na.omit(data[i])
print(curr_subset[[1, 1]])
print(nrow(curr_subset))
new.row = data.frame(neurotype = curr_subset[[1, 1]],
number = nrow(curr_subset))
neurotypes = rbind(neurotypes, new.row)
}
neurotypes
neurotypes = xtable(neurotypes)
print(neurotypes, file = "neurotypes.tex", include.rownames = FALSE)
# Below we check for the number of AuDHD people
audhd = subset(data, group == "ADHD" & Q3_4 == "Autism")
nrow(audhd)
counts = table(data$region)
pie(counts, main = "Region Breakdown", col = rainbow(length(counts)))
counts_df <- as.data.frame(counts)
counts_df <- counts_df[order(-counts_df$Freq), ]
print(counts_df)
# Find number of unique countries
country_num = length(unique(data$country))
print(as.data.frame(table(data$country)))
print(paste("Number of unique countries: ", country_num))
# Age range and average age: Q71
print("Age:")
summary(as.numeric(data$age))
# Min: 18, max: 64, mean: 32.43
print("Age median:")
median(as.numeric(data$age), na.rm = TRUE)
# Years of experience: Q9
print("Years of experience:")
summary(as.numeric(data$yoe))
# Min: 0, max: 40, mean: 10.44
print("YOE median:")
median(as.numeric(data$yoe), na.rm = TRUE)
# Gender
genderct = as.data.frame(table(data$gender))
genderct = genderct[order(-genderct$Freq), ]
# FIXME make table of gender + neurotype
gender_neurotype_table = table(data$gender, data$group)
gender_neurotype_table = as.data.frame(gender_neurotype_table)
gender_neurotype_table
# Add percentages as another column.
total = sum(genderct$Freq)
genderct$Percentage = (genderct$Freq / total) * 100
genderct
# General group numbers
groupct = as.data.frame(table(data$group))
groupct = groupct[order(-groupct$Freq), ]
total = sum(groupct$Freq)
groupct$Percentage = (groupct$Freq / total) * 100
groupct
# ageofadhd_realization is knowing you have ADHD in childhood/adulthood.
diagage = as.data.frame(table(data$ageofadhd_realization))
diagage = diagage[diagage$Var1 != "", ]
total = sum(diagage$Freq)
diagage$Percentage = (diagage$Freq / total) * 100
diagage
# How many of the Other ND group are autistic?
othernd = subset(data, group == "ND non-ADHD")
print("Num autistic in Other ND group:")
num = nrow(subset(othernd, Q3_4 == "Autism"))
print(num)
print("Percentage autistic in Other ND group:")
num / 60
# Brief context on job title
jobtitle = as.data.frame(table(data$job_title))
jobtitle = jobtitle[order(-jobtitle$Freq), ]
jobtitle
total = sum(jobtitle$Freq)
239 + 58
print("Percentage of Software Engineer or Software Developer:")
297 / total
# Q8 is diagnosis reason
diagreason = as.data.frame(table(data$Q8))
diagreason = diagreason[order(-diagreason$Freq), ]
diagreason
total = sum(diagreason$Freq)
77 / total
44 / total
counts = table(data$region)
pie(counts, main = "Region Breakdown", col = rainbow(length(counts)))
counts_df <- as.data.frame(counts)
counts_df <- counts_df[order(-counts_df$Freq), ]
print(counts_df)
# Find number of unique countries
country_num = length(unique(data$country))
print(as.data.frame(table(data$country)))
print(paste("Number of unique countries: ", country_num))
# Age range and average age: Q71
print("Age:")
summary(as.numeric(data$age))
# Min: 18, max: 64, mean: 32.43
print("Age median:")
median(as.numeric(data$age), na.rm = TRUE)
# Years of experience: Q9
print("Years of experience:")
summary(as.numeric(data$yoe))
# Min: 0, max: 40, mean: 10.44
print("YOE median:")
median(as.numeric(data$yoe), na.rm = TRUE)
# Gender
genderct = as.data.frame(table(data$gender))
genderct = genderct[order(-genderct$Freq), ]
# Make table of gender + neurotype
gender_neurotype_table = table(data$gender, data$group)
gender_neurotype_table = as.data.frame(gender_neurotype_table)
gender_neurotype_table
# Ascertain that there is one person who did not answer gender who is non-ADHD ND
sset = subset(data, group == "ND non-ADHD" && is.na(gender))
counts = table(data$region)
pie(counts, main = "Region Breakdown", col = rainbow(length(counts)))
counts_df <- as.data.frame(counts)
counts_df <- counts_df[order(-counts_df$Freq), ]
print(counts_df)
# Find number of unique countries
country_num = length(unique(data$country))
print(as.data.frame(table(data$country)))
print(paste("Number of unique countries: ", country_num))
# Age range and average age: Q71
print("Age:")
summary(as.numeric(data$age))
# Min: 18, max: 64, mean: 32.43
print("Age median:")
median(as.numeric(data$age), na.rm = TRUE)
# Years of experience: Q9
print("Years of experience:")
summary(as.numeric(data$yoe))
# Min: 0, max: 40, mean: 10.44
print("YOE median:")
median(as.numeric(data$yoe), na.rm = TRUE)
# Gender
genderct = as.data.frame(table(data$gender))
genderct = genderct[order(-genderct$Freq), ]
# Make table of gender + neurotype
gender_neurotype_table = table(data$gender, data$group)
gender_neurotype_table = as.data.frame(gender_neurotype_table)
gender_neurotype_table
# Ascertain that there is one person who did not answer gender who is non-ADHD ND
sset = subset(data, group == "ND non-ADHD" & is.na(gender))
print(sset)
# Add percentages as another column.
total = sum(genderct$Freq)
genderct$Percentage = (genderct$Freq / total) * 100
genderct
# General group numbers
groupct = as.data.frame(table(data$group))
groupct = groupct[order(-groupct$Freq), ]
total = sum(groupct$Freq)
groupct$Percentage = (groupct$Freq / total) * 100
groupct
# ageofadhd_realization is knowing you have ADHD in childhood/adulthood.
diagage = as.data.frame(table(data$ageofadhd_realization))
diagage = diagage[diagage$Var1 != "", ]
total = sum(diagage$Freq)
diagage$Percentage = (diagage$Freq / total) * 100
diagage
# How many of the Other ND group are autistic?
othernd = subset(data, group == "ND non-ADHD")
print("Num autistic in Other ND group:")
num = nrow(subset(othernd, Q3_4 == "Autism"))
print(num)
print("Percentage autistic in Other ND group:")
num / 60
# Brief context on job title
jobtitle = as.data.frame(table(data$job_title))
jobtitle = jobtitle[order(-jobtitle$Freq), ]
jobtitle
total = sum(jobtitle$Freq)
239 + 58
print("Percentage of Software Engineer or Software Developer:")
297 / total
# Q8 is diagnosis reason
diagreason = as.data.frame(table(data$Q8))
diagreason = diagreason[order(-diagreason$Freq), ]
diagreason
total = sum(diagreason$Freq)
77 / total
44 / total
